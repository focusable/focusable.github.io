{"version":3,"sources":["web-build/register-service-worker.js","assets/C5.mp3","assets/D4.mp3","assets/F4.mp3","assets/G4.mp3","src/stores/MeditationStore.ts","src/stores/RootStore.ts","src/stores/AudioStore.ts","src/utils/format.ts","src/components/CountdownCircle.tsx","src/utils/context.ts","src/utils/hooks.ts","src/screens/Meditation.tsx","src/components/Circle.tsx","src/components/CircleList.tsx","src/screens/Main.tsx","src/components/Button.tsx","src/screens/Result.tsx","App.tsx","index.js"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","module","exports","MeditationStore","types","model","started","duration","soundDurations","array","number","volatile","self","time","startTime","lastSoundTime","lastSoundIndex","failure","hearSound","finished","actions","setHearSound","hear","setTime","seconds","setFinished","value","setLastSoundTime","setLastSoundIndex","index","resetStats","increaseFailure","interval","disposer","setSoundDurations","durations","replace","setStarted","audioStore","getEnv","Date","now","probsDuringSound","probsDuringSilence","random","i","push","Math","length","setInterval","isSound","abs","floor","playSound","when","clearInterval","setDuration","views","RootStore","meditation","createRootStore","env","a","async","create","C5","require","D4","F4","files","DURATIONS","Audio","setAudioModeAsync","allowsRecordingIOS","interruptionModeAndroid","INTERRUPTION_MODE_ANDROID_DUCK_OTHERS","interruptionModeIOS","INTERRUPTION_MODE_IOS_DUCK_OTHERS","playThroughEarpieceAndroid","playsInSilentModeIOS","shouldDuckAndroid","staysActiveInBackground","sounds","this","file","Sound","createAsync","sound","stop","setPositionAsync","playAsync","pauseAsync","stopAsync","alert","pad","num","slice","styles","StyleSheet","outerCircle","overflow","justifyContent","alignItems","backgroundColor","innerCircle","leftWrap","position","top","left","halfCircle","borderTopRightRadius","borderBottomRightRadius","calcInterpolationValuesForHalfCircle1","animatedValue","shadowColor","rotate","interpolate","inputRange","outputRange","calcInterpolationValuesForHalfCircle2","color","getInitialState","props","circleProgress","Animated","Value","secondsElapsed","text","updateText","interpolationValuesHalfCircle1","interpolationValuesHalfCircle2","PercentageCircle","restartAnimation","state","stopAnimation","timing","toValue","easing","Easing","linear","start","renderHalfCircle","radius","View","style","width","height","borderRadius","transform","translateX","prevProps","prevState","setState","radiusMinusBorder","borderWidth","bgColor","containerStyle","children","renderInnerCircle","React","PureComponent","defaultProps","elapsedSeconds","totalSeconds","toString","StoreContext","undefined","useStore","useContext","Meditation","observer","Actions","pop","result","round","TouchableOpacity","onPressIn","onPressOut","disabled","flex","padding","Text","textStyle","minutes","format","paddingBottom","fontSize","alignSelf","fontFamily","fontWeight","myButton","borderColor","Circle","size","onPress","AudioStore","setTimeout","marginTop","row","flexWrap","flexDirection","CircleList","Main","bottom","Button","Result","paddingTop","App","useState","root","setRoot","useEffect","init","store","loadFromStorage","Provider","tintColor","navigationBarStyle","sceneStyle","hideNavBar","mode","key","component","registerRootComponent"],"mappings":"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","file":"static/js/app.afee06b5.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/C5.e231eca0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/D4.159a664b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/F4.0b780a91.mp3\";","module.exports = __webpack_public_path__ + \"static/media/G4.87bcb7b2.mp3\";","import {types, getEnv} from 'mobx-state-tree'\nimport {when} from 'mobx'\nimport {AudioStore} from './AudioStore'\n\nconst DURATION = 60\nconst SILENCE_DURING_SOUND = 60\nconst SILENCE_WITHOUT_SOUND = 30\n\nconst MeditationStore = types\n  .model({\n    started: false,\n    duration: DURATION,\n    soundDurations: types.array(types.number),\n  })\n  .volatile((self) => ({\n    time: 0,\n    startTime: 0,\n    lastSoundTime: 0,\n    lastSoundIndex: 0,\n    failure: 0,\n    hearSound: false,\n    finished: false,\n  }))\n  .actions((self) => ({\n    setHearSound(hear: boolean) {\n      self.hearSound = hear\n    },\n    setTime(seconds: number) {\n      self.time = seconds\n    },\n    setFinished(value: boolean) {\n      self.finished = value\n    },\n    setLastSoundTime(time: number) {\n      self.lastSoundTime = time\n    },\n    setLastSoundIndex(index: number) {\n      self.lastSoundIndex = index\n    },\n    resetStats() {\n      self.failure = 0\n      self.lastSoundIndex = 0\n      self.lastSoundTime = 0\n      self.finished = false\n    },\n    increaseFailure() {\n      self.failure += 1\n    },\n  }))\n  .actions((self) => {\n    let interval: any = null\n    let disposer: any = null\n    return {\n      setSoundDurations(durations: number[]) {\n        self.soundDurations.replace(durations)\n      },\n      setStarted(started: boolean) {\n        const audioStore: AudioStore = getEnv(self).audioStore\n        self.started = started\n        if (started) {\n          self.setTime(0)\n          self.startTime = Date.now()\n          self.resetStats()\n          const probsDuringSound: number[] = []\n          const probsDuringSilence: number[] = []\n          const random: number[] = []\n          for (let i = 0; i < SILENCE_DURING_SOUND; i++) {\n            probsDuringSound.push(0)\n          }\n          for (let i = 0; i <= self.duration + 1; i++) {\n            random.push(Math.random())\n          }\n          for (let i = 0; i < SILENCE_WITHOUT_SOUND; i++) {\n            probsDuringSilence.push(0)\n          }\n          for (let i = 0; i < self.soundDurations.length; i++) {\n            probsDuringSilence.push(i + 1)\n            probsDuringSound.push(i + 1)\n          }\n          interval = setInterval(() => {\n            const now = Date.now()\n            self.setTime(now - self.startTime)\n            if (self.time > self.duration * 1000) {\n              return\n            }\n            // check if sounds is playing\n            const isSound = self.lastSoundTime + self.soundDurations[self.lastSoundIndex - 1] - now\n            if (isSound > 0 !== self.hearSound && Math.abs(isSound) > 1000) {\n              self.increaseFailure()\n              // console.log('ERROR!', isSound, self.hearSound)\n            }\n            let index = 0\n            if (self.lastSoundIndex && now - self.lastSoundTime < 5000) {\n              index = 0\n            } else if (!self.lastSoundIndex && now - self.startTime > 5000) {\n              index = 1 + Math.floor(Math.random() * self.soundDurations.length)\n            } else {\n              if (self.lastSoundIndex && self.lastSoundTime + self.soundDurations[self.lastSoundIndex - 1] + 4000 > now) {\n                index = probsDuringSound[Math.floor(random[Math.floor(self.time / 1000)] * probsDuringSound.length)]\n                // if sound has smaller length that previous sound!\n                if (self.soundDurations[index - 1] + now < self.lastSoundTime + self.soundDurations[self.lastSoundIndex - 1]) {\n                  index = 0\n                }\n              } else {\n                index = probsDuringSilence[Math.floor(random[Math.floor(self.time / 1000)] * probsDuringSilence.length)]\n              }\n            }\n            // reset sound if duration is greater than duration\n            if (now - self.startTime + self.soundDurations[index - 1] > self.duration * 1000) {\n              index = 0\n            }\n            if (index) {\n              self.setLastSoundTime(now)\n              self.setLastSoundIndex(index)\n              audioStore.playSound(index - 1)\n            }\n          }, 1000)\n          if (disposer) {\n            disposer()\n          }\n          disposer = when(\n            () => self.time > self.duration * 1000,\n            () => {\n              audioStore.playSound(0)\n              audioStore.playSound(1)\n              clearInterval(interval)\n              ;(self as any).setStarted(false)\n              ;(self as any).setFinished(true)\n              disposer()\n            }\n          )\n        } else {\n          if (interval) {\n            clearInterval(interval)\n            interval = null\n          }\n          if (disposer) {\n            disposer()\n          }\n        }\n      },\n      setDuration(duration: number) {\n        self.duration = duration\n      },\n    }\n  })\n  .views((self) => ({\n    get result(): number {\n      return 0\n    },\n  }))\n\nexport default MeditationStore\n","import {types} from 'mobx-state-tree'\nimport MeditationStore from './MeditationStore'\n\nexport const RootStore = types.model({\n  meditation: MeditationStore,\n})\n\nexport type IRootStore = typeof RootStore.Type\n\nexport default async function createRootStore(env: any) {\n  return RootStore.create({meditation: {}}, env)\n}\n\n// import {model, prop, getSnapshot, fromSnapshot, Model} from 'mobx-keystone'\n// import {reaction} from 'mobx'\n// // import AsyncStorage from '@react-native-community/async-storage'\n// import {AsyncStorage} from 'react-native'\n// import MeditationStore from './MeditationStore'\n\n// const KEY_NAME = 'root'\n\n// @model('RootStore')\n// export class RootStore extends Model({\n//   meditation: prop<MeditationStore>(() => new MeditationStore({soundDurations: []})),\n// }) {\n//   onAttachedToRootStore() {\n//     // every time the snapshot of the configuration changes\n//     const reactionDisposer = reaction(\n//       () => getSnapshot(this),\n//       sn => {\n//         // save the config to local storage\n//         AsyncStorage.setItem(KEY_NAME, JSON.stringify(sn))\n//       }\n//     )\n\n//     // when the model is no longer part of the root store stop saving\n//     return () => {\n//       reactionDisposer()\n//     }\n//   }\n// }\n\n// export default async function createRootStore() {\n//   let data\n//   try {\n//     const str = await AsyncStorage.getItem(KEY_NAME)\n//     if (str) {\n//       data = fromSnapshot<RootStore>(JSON.parse(str))\n//     }\n//   } catch {\n//     //\n//   }\n//   return data || new RootStore({})\n// }\n","import {Audio} from 'expo-av'\nimport {INTERRUPTION_MODE_ANDROID_DUCK_OTHERS, INTERRUPTION_MODE_IOS_DUCK_OTHERS} from 'expo-av/build/Audio'\n\nconst C5 = require('../../assets/C5.mp3')\nconst D4 = require('../../assets/D4.mp3')\nconst F4 = require('../../assets/F4.mp3')\nconst G4 = require('../../assets/G4.mp3')\nconst files = [D4, G4, F4, C5]\n\nexport const DURATIONS = [15307, 8855, 5459, 6870]\n\nAudio.setAudioModeAsync({\n  allowsRecordingIOS: false,\n  interruptionModeAndroid: INTERRUPTION_MODE_ANDROID_DUCK_OTHERS,\n  interruptionModeIOS: INTERRUPTION_MODE_IOS_DUCK_OTHERS,\n  playThroughEarpieceAndroid: true,\n  playsInSilentModeIOS: true,\n  shouldDuckAndroid: true,\n  staysActiveInBackground: false,\n})\n\nexport class AudioStore {\n  sounds: any = []\n  async init() {\n    this.sounds = []\n    for (const file of files) {\n      const {sound} = await Audio.Sound.createAsync(file)\n      this.sounds.push(sound)\n    }\n  }\n  async playSound(index: number, stop: boolean = false) {\n    // const soundObject = new Audio.Sound()\n    // try {\n    //   await soundObject.loadAsync(files[index])\n    //   await soundObject.playAsync()\n    // } catch (e) {\n    //   alert(e)\n    // }\n\n    try {\n      if (stop) {\n        await this.sounds[index].setPositionAsync(DURATIONS[index] - 100)\n      }\n      await this.sounds[index].playAsync()\n      if (stop) {\n        await this.sounds[index].pauseAsync()\n        await this.sounds[index].stopAsync()\n      }\n    } catch (error) {\n      alert(error)\n    }\n  }\n}\n\nexport default new AudioStore()\n","const pad = num => ('000' + num).slice(-2)\n\nexport function format(time) {\n  const minutes = Math.floor(time / 60)\n  const seconds = Math.floor(time - minutes * 60)\n  return pad(minutes) + ':' + pad(seconds)\n}\n","import React from 'react'\nimport {Easing, Animated, StyleSheet, Text, View, ViewPropTypes} from 'react-native'\n\nconst styles = StyleSheet.create({\n  outerCircle: {\n    overflow: 'hidden',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#e3e3e3',\n  },\n  innerCircle: {\n    overflow: 'hidden',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  leftWrap: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n  },\n  halfCircle: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n    backgroundColor: '#f00',\n  },\n})\n\nfunction calcInterpolationValuesForHalfCircle1(animatedValue, {shadowColor}) {\n  const rotate = animatedValue.interpolate({\n    inputRange: [0, 50, 50, 100],\n    outputRange: ['0deg', '180deg', '180deg', '180deg'],\n  })\n\n  const backgroundColor = shadowColor\n  return {rotate, backgroundColor}\n}\n\nfunction calcInterpolationValuesForHalfCircle2(animatedValue, {color, shadowColor}) {\n  const rotate = animatedValue.interpolate({\n    inputRange: [0, 50, 50, 100],\n    outputRange: ['0deg', '0deg', '180deg', '360deg'],\n  })\n\n  const backgroundColor = animatedValue.interpolate({\n    inputRange: [0, 50, 50, 100],\n    outputRange: [color, color, shadowColor, shadowColor],\n  })\n  return {rotate, backgroundColor}\n}\n\nfunction getInitialState(props) {\n  const circleProgress = new Animated.Value(100)\n  return {\n    circleProgress,\n    secondsElapsed: 0,\n    text: props.updateText(0, props.seconds),\n    interpolationValuesHalfCircle1: calcInterpolationValuesForHalfCircle1(circleProgress, props),\n    interpolationValuesHalfCircle2: calcInterpolationValuesForHalfCircle2(circleProgress, props),\n  }\n}\ntype Props = {\n  started: boolean\n  seconds: number\n  radius: number\n  color: string\n  shadowColor: string\n  bgColor: string\n  borderWidth: number\n  containerStyle: any\n}\n\ntype State = {\n  secondsElapsed: number\n  circleProgress: any\n  interpolationValuesHalfCircle1: any\n  interpolationValuesHalfCircle2: any\n}\n\nexport default class PercentageCircle extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    color: '#f00',\n    shadowColor: '#999',\n    bgColor: '#e9e9ef',\n    borderWidth: 2,\n    seconds: 10,\n    children: null,\n    containerStyle: null,\n    updateText: (elapsedSeconds, totalSeconds) => (totalSeconds - elapsedSeconds).toString(),\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = getInitialState(props)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.started && this.props.started) {\n      this.setState(getInitialState(this.props), this.restartAnimation)\n    }\n  }\n\n  // componentDidMount() {\n  //   if (this.props.started) {\n  //     this.restartAnimation()\n  //   }\n  // }\n\n  restartAnimation = () => {\n    this.state.circleProgress.stopAnimation()\n    Animated.timing(this.state.circleProgress, {\n      toValue: 0,\n      duration: this.props.seconds * 1000,\n      easing: Easing.linear,\n    }).start()\n  }\n\n  renderHalfCircle = ({rotate, backgroundColor}): any => {\n    const {radius} = this.props\n    return (\n      <View\n        style={[\n          styles.leftWrap,\n          {\n            width: radius,\n            height: radius * 2,\n          },\n        ]}\n      >\n        <Animated.View\n          style={[\n            styles.halfCircle,\n            {\n              width: radius,\n              height: radius * 2,\n              borderRadius: radius,\n              backgroundColor,\n              transform: [{translateX: radius / 2}, {rotate}, {translateX: -radius / 2}],\n            },\n          ]}\n        />\n      </View>\n    )\n  }\n\n  renderInnerCircle() {\n    const radiusMinusBorder = this.props.radius - this.props.borderWidth\n    return (\n      <View\n        style={[\n          styles.innerCircle,\n          {\n            width: radiusMinusBorder * 2,\n            height: radiusMinusBorder * 2,\n            borderRadius: radiusMinusBorder,\n            backgroundColor: this.props.bgColor,\n            ...this.props.containerStyle,\n          },\n        ]}\n      >\n        {this.props.children}\n      </View>\n    )\n  }\n\n  render() {\n    const {interpolationValuesHalfCircle1, interpolationValuesHalfCircle2} = this.state\n    return (\n      <View\n        style={[\n          styles.outerCircle,\n          {\n            width: this.props.radius * 2,\n            height: this.props.radius * 2,\n            borderRadius: this.props.radius,\n            backgroundColor: this.props.color,\n          },\n        ]}\n      >\n        {this.renderHalfCircle(interpolationValuesHalfCircle1)}\n        {this.renderHalfCircle(interpolationValuesHalfCircle2)}\n        {this.renderInnerCircle()}\n      </View>\n    )\n  }\n}\n","import * as React from 'react'\nimport {IRootStore} from '../stores/RootStore'\n\nexport const StoreContext = React.createContext<IRootStore | undefined>(undefined)\n","import {useContext, useEffect, useRef} from 'react'\nimport {StoreContext} from './context'\n\nexport function useStore() {\n  return useContext(StoreContext)\n}\nexport function useInterval(callback, delay) {\n  const savedCallback: any = useRef()\n\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n","import * as React from 'react'\nimport {observer} from 'mobx-react'\nimport {View, Text, TouchableOpacity, StyleSheet} from 'react-native'\nimport {format} from '../utils/format'\nimport CountdownCircle from '../components/CountdownCircle'\nimport {useStore} from '../utils/hooks'\nimport {Actions} from 'react-native-router-flux'\n\nconst Meditation = observer(({duration}: {duration: number}) => {\n  const {meditation} = useStore()!\n  const {failure, finished, started, time, setDuration, setStarted, setHearSound} = meditation\n  React.useEffect(() => {\n    if (finished) {\n      Actions.pop()\n      Actions.result({result: Math.round(100 - (failure * 100) / duration), duration})\n    } else {\n      setDuration(duration)\n      setStarted(true)\n    }\n    return () => {\n      setStarted(false)\n    }\n  }, [finished])\n\n  return (\n    <TouchableOpacity\n      onPressIn={() => setHearSound(true)}\n      onPressOut={() => setHearSound(false)}\n      disabled={!started}\n      style={{flex: 1, alignItems: 'center', backgroundColor: 'black'}}\n    >\n      <View style={{alignItems: 'center', justifyContent: 'center'}}>\n        <View style={{padding: 50}}>\n          <CountdownCircle started={started} seconds={duration} radius={125} borderWidth={8} color=\"#26252A\" shadowColor=\"#FFA00A\" bgColor=\"black\">\n            <Text style={styles.textStyle}>{format(duration - Math.round(time / 1000))}</Text>\n          </CountdownCircle>\n        </View>\n      </View>\n      <View style={{paddingBottom: 50, alignItems: 'center', justifyContent: 'center'}}>\n        <Text style={{fontSize: 16, color: 'white'}}>Нажмите на экран пока Вы слышите звук</Text>\n        <Text style={{fontSize: 16, color: 'white'}}>\n          Отпустите экран когда звука нет{'\\n'}\n          {'\\n'}\n        </Text>\n        <Text style={{fontSize: 16, color: 'white'}}>\n          Займите удобное положение, расслабьтесь и закройте глаза (когда медитация закончится, Вы услышите двойной звук)\n        </Text>\n      </View>\n    </TouchableOpacity>\n  )\n})\n\nconst styles = StyleSheet.create({\n  textStyle: {\n    alignSelf: 'center',\n    fontFamily: 'HelveticaNeue',\n    color: 'white',\n    fontSize: 60,\n    fontWeight: '200',\n  },\n  myButton: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 5,\n    height: 250,\n    width: 250, // The Width must be the same as the height\n    borderRadius: 400, // Then Make the Border Radius twice the size of width or Height\n    backgroundColor: 'black',\n    borderColor: '#FFA00A',\n    borderWidth: 10,\n  },\n})\n\nexport default Meditation\n","import * as React from 'react'\nimport {View, Text, TouchableOpacity} from 'react-native'\nimport {Actions} from 'react-native-router-flux'\nimport AudioStore from '../stores/AudioStore'\n\nconst Circle = ({duration = 60, size = 80}: {duration?: number; size?: number}) => (\n  <View style={{width: size + 20, height: size + 20, justifyContent: 'center', alignItems: 'center', backgroundColor: 'black'}}>\n    <TouchableOpacity\n      onPress={async () => {\n        await AudioStore.playSound(0, true)\n        await AudioStore.playSound(1, true)\n        await AudioStore.playSound(2, true)\n        await AudioStore.playSound(3, true)\n        setTimeout(() => Actions.meditation({duration}))\n      }}\n      style={{\n        borderRadius: (size + 6) / 2,\n        backgroundColor: '#222223',\n        width: size + 6,\n        height: size + 6,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n    >\n      {/* <Image style={{position: 'absolute', width: size, height: size, tintColor: 'white'}} source={image} /> */}\n      <View style={{alignItems: 'center'}}>\n        <Text style={{color: 'orange', fontSize: 28, fontWeight: 'bold'}}>{Math.floor(duration / 60)}</Text>\n        <Text style={{color: 'white', marginTop: -5, fontSize: 18}}>мин</Text>\n      </View>\n    </TouchableOpacity>\n  </View>\n)\nexport default Circle\n","import * as React from 'react'\nimport {View, StyleSheet} from 'react-native'\nimport Circle from './Circle'\n\nconst CircleList = () => (\n  <View style={{alignItems: 'center', backgroundColor: 'black'}}>\n    <View style={styles.row}>\n      <Circle />\n      <Circle duration={180} />\n      <Circle duration={300} />\n    </View>\n    <View style={styles.row}>\n      <Circle duration={900} />\n      <Circle duration={1800} />\n      <Circle duration={3600} />\n    </View>\n  </View>\n)\n\nconst styles = StyleSheet.create({\n  row: {\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n  },\n})\n\nexport default CircleList\n","import * as React from 'react'\nimport {View, Text} from 'react-native'\nimport CircleList from '../components/CircleList'\n\nconst Main = () => (\n  <View style={{flex: 1, alignItems: 'center'}}>\n    <Text style={{padding: 20, color: 'white', fontSize: 20, fontWeight: 'bold'}}>Тренажер медитации</Text>\n    <Text style={{padding: 20, color: 'white', fontSize: 20}}>\n      Вам будет предложена медитация на звук - одна из базовых техник по работе с вниманием. {'\\n'}\n      Все что Вам нужно делать - это просто слушать звуки и тишину, в каждый момент времени осозновать, слышите ли Вы звук или нет.\n    </Text>\n    <Text style={{padding: 20, color: 'white', fontSize: 20, fontWeight: 'bold'}}>Выберите длительность</Text>\n    <CircleList />\n    <Text style={{position: 'absolute', bottom: 40, color: 'gray'}}>v0.15</Text>\n  </View>\n)\n\nexport default Main\n","import * as React from 'react'\nimport {Text, TouchableOpacity} from 'react-native'\n\nconst Button = ({onPress, text}: {onPress: () => void; text?: string}) => (\n  <TouchableOpacity\n    style={{width: 280, height: 60, backgroundColor: '#FFA00A', justifyContent: 'center', alignItems: 'center', borderRadius: 20}}\n    onPress={onPress}\n  >\n    <Text style={{color: 'white', fontWeight: 'bold', fontSize: 20}}>{text || 'Начать'}</Text>\n  </TouchableOpacity>\n)\n\nexport default Button\n","import * as React from 'react'\nimport {View, Text} from 'react-native'\nimport Button from '../components/Button'\nimport {Actions} from 'react-native-router-flux'\nimport {useStore} from '../utils/hooks'\n\nconst Result = ({duration = 600, result = 100}: {duration: number; result: number}) => {\n  const {meditation} = useStore()!\n  const {setFinished} = meditation\n  return (\n    <View style={{flex: 1, alignItems: 'center'}}>\n      <Text style={{paddingTop: 100, color: 'white', fontSize: 20, fontWeight: 'bold'}}>Результат</Text>\n      <Text style={{padding: 20, color: 'white', fontSize: 20}}>Длительность медитации: {duration / 60} мин</Text>\n      <Text style={{color: 'white', fontSize: 20}}>Ваша внимательность: {result}%</Text>\n\n      <View style={{position: 'absolute', bottom: 100}}>\n        <Button\n          text=\"ОК\"\n          onPress={() => {\n            setFinished(false)\n            Actions.pop()\n          }}\n        />\n      </View>\n    </View>\n  )\n}\n\nexport default Result\n","import * as React from 'react'\nimport {useState, useEffect} from 'react'\nimport createRootStore from './src/stores/RootStore'\nimport audioStore, {DURATIONS} from './src/stores/AudioStore'\n// import {NavigationNativeContainer} from '@react-navigation/native'\n// import {createStackNavigator} from '@react-navigation/stack'\nimport Meditation from './src/screens/Meditation'\nimport Main from './src/screens/Main'\nimport Result from './src/screens/Result'\nimport {StoreContext} from './src/utils/context'\n// import * as Localization from 'expo-localization'\n// import i18n from 'i18n-js'\nimport {Router, Stack, Scene} from 'react-native-router-flux'\n\n// const Stack = createStackNavigator()\n// Set the key-value pairs for the different languages you want to support.\n// i18n.translations = {\n//   en: {title: 'Focus - meditation trainer'},\n//   ru: {title: 'Focus - тренажер медитации'},\n// }\n// // Set the locale once at the beginning of your app.\n// i18n.locale = Localization.locale\n// // When a value is missing from a language it'll fallback to another language with the key present.\n// i18n.fallbacks = true\n\nfunction App() {\n  // load store data from local storage\n  const [root, setRoot] = useState<any>(undefined)\n  useEffect(() => {\n    async function loadFromStorage() {\n      audioStore.init()\n      const store = await createRootStore({audioStore})\n      store.meditation.setSoundDurations(DURATIONS)\n      setRoot(store)\n      // RNBootSplash.hide({duration: 250})\n    }\n    loadFromStorage()\n  }, [])\n  return (\n    !!root && (\n      <StoreContext.Provider value={root}>\n        <Router tintColor=\"white\" navigationBarStyle={{backgroundColor: 'black'}} sceneStyle={{backgroundColor: 'black'}}>\n          <Stack hideNavBar mode=\"modal\">\n            <Stack hideNavBar>\n              <Scene key=\"main\" component={Main} />\n              <Scene key=\"meditation\" component={Meditation} hideNavBar />\n            </Stack>\n            <Scene key=\"result\" component={Result} />\n          </Stack>\n        </Router>\n      </StoreContext.Provider>\n    )\n  )\n}\n\nexport default App\n// export default from './storybook'\n{\n  /* <Scene key=\"Main\" component={Main} title={i18n.t('title')} /> */\n}\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}